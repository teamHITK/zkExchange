import { MerkleSumTree, MerkleProof } from "@0xagnish/zk-data-prep";
import { CircomInput } from "./types/index";

/**
 * @notice Building the inputs for the circom circuit
 * @param merkleSumTree the merkle sum tree generated by the prover
 * @param userIndex the index of the user in the Merkle Sum Tree
 * @param assetsSum the sum of assets of the exchange
 * @returns The input for the Circom circuit
 */
export default function buildCircomInput(
  merkleSumTree: MerkleSumTree,
  userIndex: number,
  assetsSum: bigint
): CircomInput {
  const proofOfMembershipInput: MerkleProof =
    merkleSumTree.createProof(userIndex);

  const circomInput: CircomInput = {
    rootHash: proofOfMembershipInput.rootHash,
    username: proofOfMembershipInput.entry.usernameToBigInt,
    balance: proofOfMembershipInput.entry.balance,
    pathIndices: proofOfMembershipInput.pathIndices,
    siblingsHashes: proofOfMembershipInput.siblingsHashes,
    siblingsSums: proofOfMembershipInput.siblingsSums,
    assetsSum,
  };
  return circomInput;
}
